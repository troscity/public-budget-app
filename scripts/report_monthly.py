import os, argparse
from datetime import datetime as dt
import duckdb, pandas as pd
from scripts.common import connect_db, load_yaml

ROOT = os.path.dirname(os.path.dirname(__file__))
REPORTS_DIR = os.path.join(ROOT, "reports")

def month_bounds(ym):
    start = dt.strptime(ym, "%Y-%m")
    if start.month == 12:
        end = dt(start.year + 1, 1, 1)
    else:
        end = dt(start.year, start.month + 1, 1)
    return start, end

def build_report(ym):
    con = connect_db()
    start, end = month_bounds(ym)

    con.execute(f"""
      CREATE OR REPLACE TEMP VIEW mtx AS
      SELECT *
      FROM transactions
      WHERE posted_at >= '{start}' AND posted_at < '{end}'
    """)

    # Exclude internal transfers; separate refunds
    inc_total = con.execute("""
      SELECT COALESCE(SUM(amount),0)
      FROM mtx
      WHERE amount > 0
        AND (internal_transfer IS NOT TRUE)
        AND NOT (category = 'Income' AND subcategory = 'Refunds')
    """).fetchone()[0]

    refunds = con.execute("""
      SELECT COALESCE(SUM(amount),0)
      FROM mtx
      WHERE amount > 0
        AND (internal_transfer IS NOT TRUE)
        AND (category = 'Income' AND subcategory = 'Refunds')
    """).fetchone()[0]

    exp_total = con.execute("""
      SELECT COALESCE(SUM(amount),0)
      FROM mtx
      WHERE amount < 0
        AND (internal_transfer IS NOT TRUE)
    """).fetchone()[0]

    net_total = inc_total + exp_total + refunds

    # Count internal transfers
    transfer_count = con.execute("SELECT COUNT(*) FROM mtx WHERE internal_transfer = true").fetchone()[0]
    transfer_amount = con.execute("SELECT COALESCE(SUM(ABS(amount)),0) FROM mtx WHERE internal_transfer = true").fetchone()[0]

    by_cat = con.execute("""
      SELECT COALESCE(category,'Uncategorised') AS category, ROUND(SUM(amount),2) AS total
      FROM mtx
      WHERE internal_transfer IS NULL OR internal_transfer = false
      GROUP BY 1
      ORDER BY total ASC
    """).fetchdf()

    by_merch = con.execute("""
      SELECT merchant, ROUND(SUM(amount),2) AS total, COUNT(*) AS n
      FROM mtx
      WHERE internal_transfer IS NULL OR internal_transfer = false
      GROUP BY 1
      ORDER BY total ASC
      LIMIT 20
    """).fetchdf()

    # Save CSV summaries
    out_dir = os.path.join(REPORTS_DIR, ym)
    os.makedirs(out_dir, exist_ok=True)
    by_cat.to_csv(os.path.join(out_dir, "by_category.csv"), index=False)
    by_merch.to_csv(os.path.join(out_dir, "by_merchant.csv"), index=False)

    # Build Markdown
    md = [f"# Monthly Report â€” {ym}"]
    md.append("")
    md.append(f"*This report shows data for {ym} only, not cumulative totals*")
    md.append("")
    md.append("## Summary (Excluding Internal Transfers)")
    md.append(f"**Income (excl. refunds):** ${inc_total:,.2f}")
    md.append(f"**Expenses (excl. transfers):** ${exp_total:,.2f}")
    md.append(f"**Refunds:** ${refunds:,.2f}")
    md.append(f"**Net:** ${net_total:,.2f}")
    md.append("")
    md.append(f"**Internal Transfers:** {transfer_count} transactions totaling ${transfer_amount:,.2f}")
    md.append("")
    md.append("## Transaction Counts")
    md.append(f"**Total Transactions:** {con.execute('SELECT COUNT(*) FROM mtx').fetchone()[0]}")
    md.append(f"**Real Transactions (excl. transfers):** {con.execute('SELECT COUNT(*) FROM mtx WHERE internal_transfer IS NULL OR internal_transfer = false').fetchone()[0]}")
    md.append("")
    md.append("## Spend by Category")
    md.append(by_cat.to_markdown(index=False))
    md.append("")
    md.append("## Top Merchants (by spend)")
    md.append(by_merch.to_markdown(index=False))
    md.append("")
    md.append("_Auto-generated by budget-agent._")
    md.append(f"_Report generated for {ym} only._")

    with open(os.path.join(out_dir, "report.md"), "w") as f:
        f.write("\n".join(md))

    print(f"Report written to reports/{ym}/")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--month", required=True, help="YYYY-MM e.g. 2025-08")
    args = parser.parse_args()
    build_report(args.month)

if __name__ == "__main__":
    main()
